@page
@model BibliotecaXPTO.Pages.User.ObrasModel
@{
    ViewData["Title"] = "Obras";
}

<header>
    <nav class="sidebar">
        <div class="menu-icon">☰</div>
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="" asp-page="/User/Inicial">
                    <i class="fas fa-home"></i> <span class="menu-text">Inicial</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-white active" asp-area="" asp-page="/User/Obras">
                    <i class="fa fa-book" aria-hidden="true"></i>
                    <span class="menu-text">Obras</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="" asp-page="/User/Requisicoes">
                    <i class="fa fa-bookmark" aria-hidden="true"></i>
                    <span class="menu-text">Requisições</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="" asp-page="/User/Historico">
                    <i class="fa fa-history" aria-hidden="true"></i>
                    <span class="menu-text">Histórico</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="" asp-page="/User/Perfil">
                    <i class="fas fa-user"></i> <span class="menu-text">Perfil</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="" asp-page="/User/Login" onclick="logout()">
                    <i class="fas fa-sign-out-alt"></i> <span class="menu-text">Sair</span>
                </a>
            </li>
        </ul>
    </nav>
</header>

<h2 class="titulo-obras titulo">Acervo de Obras</h2>

<!-- Campo de pesquisa -->
<div class="pesquisar_obra">
    <form method="get" style="display: flex; gap: 10px;">
        <input class="input_pesquisa" type="text" name="Pesquisa" placeholder="Pesquisar por título ou autor" value="@Model.Pesquisa" />
        <button type="submit" class="btn-pesquisar">Buscar</button>
    </form>
</div>

<div class="grid-obras">
    @foreach (var obra in Model.Obras)
    {
        <div class="card-obra">
            <div class="imagem-container">
                @if (!string.IsNullOrEmpty(obra.ImagemBase64))
                {
                    <!-- Exibe a imagem armazenada como base64 -->
                    <img src="data:image/jpeg;base64,@obra.ImagemBase64" alt="@obra.Titulo" class="imagem-obra" />
                }
                else
                {
                    <!-- Se não houver imagem, exibe uma default -->
                    <img src="~/images/img/default.jpg" alt="Imagem Padrão" class="imagem-obra" />
                }
            </div>

            <div class="detalhes-obra">
                <h3>@obra.Titulo</h3>
                <p><strong>Autor:</strong> @obra.Autor</p>

                <!-- Ícone de informação -->
                <div class="info-icon">
                    <span style="color: #F7B733;">
                        <i class="fa fa-info" aria-hidden="true"></i>
                    </span> <!-- Cor azul -->
                    <div class="info-tooltip">
                        <p><strong>Ano:</strong> @(obra.AnoPublicacao.HasValue ? obra.AnoPublicacao.Value : "Desconhecido")</p>
                        <p><strong>Gênero:</strong> @obra.Genero</p>
                        <p>@obra.Descricao</p>
                    </div>
                </div>

                <!-- Botão "Requisitar" -->
                <button class="btn-requisitar" onclick="openModal('@obra.ObraID', '@obra.Titulo')">Requisitar</button>
            </div>
        </div>
    }
</div>

<!-- Modal de Requisição (HTML) -->
<div id="requisicaoModal" class="modal">
    <div class="modal-content">
        <!-- Botão de fechar -->
        <span class="close-requisicao">&times;</span>
        <!-- Título da modal -->
        <h3 id="modalTitle"></h3>

        <!-- Selecionar Núcleo -->
        <label for="nucleoSelect">Selecione o Núcleo:</label>
        <select id="nucleoSelect">
            <!-- As opções serão carregadas dinamicamente via fetch GET -->
        </select>

        <!-- Botão que confirma a requisição -->
        <button id="confirmRequisitar">Confirmar Requisição</button>

        <!-- Mensagem de retorno (data de devolução ou erro) -->
        <div id="requisicaoResult"></div>
    </div>
</div>

@Html.AntiForgeryToken()
<!-- JavaScript Completo -->
<script>
    // Define a função openModal como global para ser acessível pelo onclick do botão
    window.openModal = function (obraId, obraTitulo) {
        // Define o título da modal
        document.getElementById('modalTitle').innerText = "Requisitar: " + obraTitulo;
        // Seta o data-obra-id no botão Confirmar
        document.getElementById('confirmRequisitar').setAttribute('data-obra-id', obraId);
        // Limpa mensagem anterior
        document.getElementById('requisicaoResult').innerText = "";
        // Preenche a lista com uma mensagem de "Carregando..."
        var nucleoSelect = document.getElementById('nucleoSelect');
        nucleoSelect.innerHTML = "<option value=''>Carregando...</option>";

        // Faz uma requisição GET para obter os núcleos disponíveis para essa obra
        fetch(`?handler=NucleosDisponiveis&obraId=${obraId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error("Erro na resposta do servidor ao obter núcleos.");
                }
                return response.json();
            })
            .then(data => {
                nucleoSelect.innerHTML = ""; // Limpa opções anteriores
                if (Array.isArray(data) && data.length > 0) {
                    data.forEach(nucleo => {
                        let option = document.createElement("option");
                        option.value = nucleo.nucleoID;
                        option.text = nucleo.nome;
                        nucleoSelect.add(option);
                    });
                } else {
                    nucleoSelect.innerHTML = "<option value=''>Nenhum núcleo disponível</option>";
                }
            })
            .catch(error => {
                console.error("Erro ao carregar núcleos:", error);
                nucleoSelect.innerHTML = "<option value=''>Erro ao carregar núcleos</option>";
            });

        // Exibe a modal
        document.getElementById('requisicaoModal').style.display = "block";
    };

    // Fecha a modal quando clica no "X"
    document.querySelector('.close-requisicao').onclick = function() {
        document.getElementById('requisicaoModal').style.display = "none";
    };

    // Ao confirmar a requisição, envia o POST com os nomes corretos
    document.getElementById('confirmRequisitar').onclick = function () {
        var obraId = this.getAttribute('data-obra-id');
        var nucleoId = document.getElementById('nucleoSelect').value;

        // Recupera o token antifalsificação presente no formulário
        var tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        var token = tokenElement ? tokenElement.value : '';

        fetch('?handler=Requisitar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            // Envia as chaves com os mesmos nomes das propriedades bindadas
            body: JSON.stringify({ RequisitarObraId: obraId, RequisitarNucleoId: nucleoId })
        })
        .then(response => {
            console.log("Resposta do servidor:", response);
            if (!response.ok) {
                throw new Error("Erro na resposta do servidor ao requisitar a obra.");
            }
            return response.text();
        })
        .then(text => {
            console.log("Texto recebido:", text);
            if (!text) {
                throw new Error("Resposta vazia do servidor.");
            }
            return JSON.parse(text);
        })
        .then(data => {
            var resultElement = document.getElementById('requisicaoResult');
            if (data.dataDevolucao) {
                resultElement.innerText = "Devolva a obra até: " + data.dataDevolucao;
            } else if (data.error) {
                resultElement.innerText = "Erro: " + data.error;
            }
        })
        .catch(error => {
            console.error("Erro na requisição:", error);
            document.getElementById('requisicaoResult').innerText = "Erro ao processar a requisição.";
        });
    };

    // (Opcional) Fecha a modal se clicar fora dela
    window.onclick = function(event) {
        var modal = document.getElementById('requisicaoModal');
        if (event.target === modal) {
            modal.style.display = "none";
        }
    };
</script>


